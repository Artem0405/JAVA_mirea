import java.util.Arrays; // Импортирование класса массивов из стандартной библиотеки Java
import java.util.Comparator; // Импортирование класса компараторов из стандартной библиотеки Java

// Класс, реализующий сортировку слиянием
class MergeSortTest {
    // Метод для объединения двух отсортированных списков
    private static Student[] merge(Student[] arr1, Student[] arr2) { // Приватный метод, объединяющий два отсортированных массива
        int n1 = arr1.length; // Длина первого массива
        int n2 = arr2.length; // Длина второго массива
        Student[] mergedList = new Student[n1 + n2]; // Создание результирующего массива

        int i = 0, j = 0, k = 0; // Инициализация индексов для обхода двух массивов и результирующего массива
        while (i < n1 && j < n2) { // Цикл для слияния двух массивов
            if (arr1[i].getGPA() >= arr2[j].getGPA()) { // Если значение GPA в первом массиве больше или равно значению GPA во втором массиве
                mergedList[k] = arr1[i]; // Присваивание значения из первого массива результирующему массиву
                i++; // Увеличение индекса первого массива
            } else {
                mergedList[k] = arr2[j]; // Присваивание значения из второго массива результирующему массиву
                j++; // Увеличение индекса второго массива
            }
            k++; // Увеличение индекса результирующего массива
        }

        // Добавление оставшихся элементов из первого массива
        while (i < n1) {
            mergedList[k] = arr1[i]; // Присваивание оставшихся значений из первого массива результирующему массиву
            i++; // Увеличение индекса первого массива
            k++; // Увеличение индекса результирующего массива
        }
        // Добавление оставшихся элементов из второго массива
        while (j < n2) {
            mergedList[k] = arr2[j]; // Присваивание оставшихся значений из второго массива результирующему массиву
            j++; // Увеличение индекса второго массива
            k++; // Увеличение индекса результирующего массива
        }

        return mergedList; // Возвращение объединенного массива
    }

    // Метод для сортировки списка с использованием сортировки слиянием
    public static Student[] mergeSort(Student[] students) { // Публичный метод для сортировки массива с использованием сортировки слиянием
        int n = students.length; // Длина массива

        if (n < 2)
            return students; // Если массив содержит менее двух элементов, он уже отсортирован

        int mid = n / 2; // Находим середину массива
        Student[] left = Arrays.copyOfRange(students, 0, mid); // Создаем левую половину массива
        Student[] right = Arrays.copyOfRange(students, mid, n); // Создаем правую половину массива

        left = mergeSort(left); // Рекурсивно сортируем левую половину
        right = mergeSort(right); // Рекурсивно сортируем правую половину

        return merge(left, right); // Возвращаем результат слияния отсортированных левой и правой половин массива
    }

    public static void main(String[] args) { // Основной метод
        Student[] students = { // Инициализация массива студентов
                new Student(1, 3.5),
                new Student(2, 3.0),
                new Student(3, 3.8),
                new Student(4, 3.7),
                new Student(5, 3.2)
        };

        System.out.println("Исходный массив студентов: " + Arrays.toString(students)); // Вывод исходного массива

        Student[] sortedStudents = mergeSort(students); // Сортировка массива студентов с использованием сортировки слиянием

        System.out.println("Отсортированный массив студентов: " + Arrays.toString(sortedStudents)); // Вывод отсортированного массива
    }
}
